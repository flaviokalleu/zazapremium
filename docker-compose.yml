version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: zazap_postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-zazap2}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASS:-99480231a}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5433}:5432"
    networks:
      - zazap_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-zazap2}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zazap_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - zazap_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: zazap_backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-zazap2}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS:-99480231a}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-supersecretjwtkey}
      - PORT=${PORT:-8081}
      - HOST=${HOST:-0.0.0.0}
  - FRONTEND_ORIGINS=${FRONTEND_ORIGINS:-http://${HOST_IP:-localhost}:${FRONTEND_PORT:-4000}}
      - ACCESS_TOKEN_EXPIRY=${ACCESS_TOKEN_EXPIRY:-30m}
      - REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY:-7d}
      - EXPOSE_REFRESH_TOKEN=${EXPOSE_REFRESH_TOKEN:-true}
      - FORCE_INSECURE_COOKIES=${FORCE_INSECURE_COOKIES:-true}
      - COOKIE_SAMESITE=${COOKIE_SAMESITE:-lax}
      - COOKIE_SECURE=${COOKIE_SECURE:-false}
      - LOG_AUTH_VERBOSE=${LOG_AUTH_VERBOSE:-false}
      - BAILEYS_AUTH_ROOT=${BAILEYS_AUTH_ROOT:-privated/baileys}
      - VAPID_PUBLIC=${VAPID_PUBLIC:-BD7q4d1yPm_R7_sBpEYqsfO9QOJmmTmGOiUbVA4-fcvvrWfShU5g23zR5MD7ykKtjXaFyu-yM4ivpucEYxjMKWY}
      - VAPID_PRIVATE=${VAPID_PRIVATE:-fZbUZzvTaI1mUgUV8fXb9GwvMbArjl173Hb_q3XRUJQ}
    ports:
      - "${PORT:-8081}:${PORT:-8081}"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/privated:/app/privated
      - ./backend/sessions:/app/sessions
    networks:
      - zazap_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8081}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://${HOST_IP:-localhost}:${PORT:-8081}
        - REACT_APP_SOCKET_URL=http://${HOST_IP:-localhost}:${PORT:-8081}
    container_name: zazap_frontend
    ports:
      - "${FRONTEND_PORT:-4000}:80"
    networks:
      - zazap_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: zazap_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - zazap_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  postgres_data:
  redis_data:

networks:
  zazap_network:
    driver: bridge
